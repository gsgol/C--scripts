using System;
using System.Collections.Generic;
using Random;

public class Recipes
{

	int price;
	int preparation_time;
	List <string> ingredients;
	public Recipes (int pr, int prep_tm, List<string> ingr)
	{	//конструктор класса
		this.price = pr;
		this.preparation_time = prep_tm;
		foreach(string ingredient in ingr)
		{
			this.ingredients.Add(ingredient);
		}
	}
}


public class Cafe
{

	int min_interval;
	int max_interval;
	int money;
	Dictionary<string, Recipes> recipes;
	Dictionary<string, int> warehouse;
	Dictionary<string, int> shop;
	public Cafe(int min_t, int max_t, int mon, List<KeyValuePair<string, Recipes>> recipes_1, List<KeyValuePair<string, int>> sclad, List<string> sh)
	{
		//конструктор класса
		this.min_interval = min_t;
		this.max_interval = max_t;
		this.money = mon;
		foreach(KeyValuePair<string, Recipes> recipe_1 in recipes_1)
		{
			this.recipes.Add(recipe_1.Key, recipe_1.Value);
		}
		foreach(KeyValuePair<string, int> ingr in sclad)
		{
			this.warehouse.Add(ingr.Key, ingr.Value);
		}
		foreach (string ingr in sh)
		{
			this.shop.Add(ingr)
		}

	}
	void UpdateWarehouse (string name, int amount)
	{
		// добавление на склад определенного кол-ва ингредиентов если такого ингредиента нет в словаре он создается
		if (this.warehouse.TryGetValue(name))
		{
			this.warehouse[name] += amount;
		}
		else:
		{
			this.warehouse.Add(name, value);
		}
	}
	void Buy(string name, int amount, int price)
	{
		// покупка определенного числа ингредиентов надо сделать чтобы пользователь сам вводил сколько он хочет купить продуктов
		// если пользователь пытается купить продуктов больше чем может то покупка совершается только на  то число которое может себе позволить пользователь
		if (amount * price <= this.money)
		{
			UpdateWarehouse(name, amount);
			this.money -= amount * price;
		}
		else
		{
			UpdateWarehouse(name, (int)(this.money / price);
			this.money -= (int)(this.money / price) * price;
			//надо бы вывести соообщение что недостачно средств для покупки всех но я хз как лучше это сделать

		}
	}
	string MakeAnOrder ()
	{
		// выбирается 1 из рецептов из словаря
		List<string> keyList = new List<string>(this.recipes.Keys);
		Random rnd = new Random();
		return keyList[rnd.Next(keyList.Count())];
	
	}
	void PrepareAnOrder()
	{
		// если возможно то выбранный рецепт приготовляется т.е отнимаются ингредиенты которые требуются для приготовления, прибавляется к общему балансу денег цена блюда
		string name = MakeAnOrder();
		List<string> keyList = this.recipes[name].ingredients;
		List<string> missing_ingredients = new List<string>();
		bool Is_Possible = true;
		foreach(string ingredient in keyList)
		{
			if (this.warehouse[ingredient])
			{
				Is_Possible = false;
				missing_ingredients.Add(ingredient);
			}
		}
		if(Is_Possible)
		{
			foreach(string ingredient in keyList)
			{
				this.warehouse[ingredient] -= 1;
			}
			money += this.recipes[name].price;
			//что со временем приготовления делать хз
		}
		else
		{
			foreach(string ingredient in missing_ingredients)
			{
				//вывод ингредиентов
			}
			// надо вывести что невозможно приготовить блюдо
			
		}
	}
	void UpdateTimeInterval(int min, int max)
	{
		// изменяем максимальный и минимальный интервал между посетителями 
		this.max_interval = max;
		this.min_interval = min;
	}


}
